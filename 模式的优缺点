一： 享元模式
优点：
    1、享元模式的优点在于它能够极大的减少系统中对象的个数。
    2、享元模式由于使用了外部状态，外部状态相对独立，不会影响到内部状态，所以享元模式使得享元对象能够在不同的环境被共享。
缺点：
    1、由于享元模式需要区分外部状态和内部状态，使得应用程序在某种程度上来说更加复杂化了。
    2、为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。
适用场景：
    1、如果一个系统中存在大量的相同或者相似的对象，由于这类对象的大量使用，会造成系统内存的耗费，可以使用享元模式来减少系统中对象的数量。
    2、对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。
模式总结：
    1、享元模式可以极大地减少系统中对象的数量。但是它可能会引起系统的逻辑更加复杂化。
    2、享元模式的核心在于享元工厂，它主要用来确保合理地共享享元对象。
    3、内部状态为不变共享部分，存储于享元享元对象内部，而外部状态是可变部分，它应当由客户端来负责。

二：代理模式
优点：
    1.协调调用者和被调用者，降低系统耦合度
    2.在客户端与目标类之间起了中介作用，可以保护目标对象。
缺点：
    1.处理速度变慢
    2.多了额外的工作，有些模式实现非常复杂
适用场景：
    1、 远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。
    2、 虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销。
    3、 保护代理：用来控制对真实对象的访问权限。
模式总结：
    1、代理模式是通过使用引用代理对象来访问真实对象，在这里代理对象充当用于连接客户端和真实对象的中介者。
    2、代理模式主要用于远程代理、虚拟代理和保护代理。其中保护代理可以进行访问权限控制。
三：策略模式
优点：
    1、策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。
    2、使用策略模式可以避免使用多重条件转移语句。把每种选择都变成了一个类
缺点：
    1.客户端调用必须知道所有的策略类
    2.会产生很多策略类
适用场景：
     1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。
     2,.一个系统需要在几个算法中动态的选择一种。
四：模板模式
优点：
    1.定义了一组算法，具体的不同实现交给子类完成。
    2.一种代码复用的基本技术
    3.导致了一种反向的控制结构，通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，符合“开闭原则”。
缺点：
    每个不同的实现都需要一个子类来完成，导致类的个数增加，使系统更加复杂，庞大。
适用场景：
    1.一次性实现一个算法的不变部分，并将可变部分留给子类来实现。
    2.各子类公共的行为应该被提取出来并集中到一个公共父类中以避免代码的重复。
模式总结：
    1.定义了算法的步骤，将这些步骤的实现延迟到子类。
    2.提供了代码复用的技巧。
    3.使用抽象类可以定义抽象方法，具体方法和钩子。
    4.为了防止子类改变算法的实现顺序，将其声明为final。
五：工厂方法模式：
    1、工厂方法模式完全符合“开闭原则”。
    2、工厂方法模式使用继承，将对象的创建委托给子类，通过子类实现工厂方法来创建对象。
    3、工厂方法允许类将实例化延伸到子类进行。
    4、工厂方法让子类决定要实例化的类时哪一个。在这里我们要明白这并不是工厂来决定生成哪种产品，而是在编写创建者类时，不需要知道实际创建的产品是哪个，选择了使用哪个子类，就已经决定了实际创建的产品时哪个了。
    5、在工厂方法模式中，创建者通常会包含依赖于抽象产品的代码，而这些抽象产品是、由子类创建的，创建者不需要真的知道在制作哪种具体产品。
六：组合模式：
使用场景：
    1、需要表示一个对象整体或部分层次，在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，可以一致地对待它们。
    2、让客户能够忽略不同对象层次的变化，客户端可以针对抽象构件编程，无须关心对象层次结构的细节。
模式总结：
    1、 组合模式用于将多个对象组合成树形结构以表示“整体-部分”的结构层次。组合模式对单个对象（叶子对象）和组合对象（容器对象）的使用具有一致性。
    2、 组合对象的关键在于它定义了一个抽象构建类，它既可表示叶子对象，也可表示容器对象，客户仅仅需要针对这个抽象构建进行编程，无须知道他是叶子对象还是容器对象，都是一致对待。
    3、 组合模式虽然能够非常好地处理层次结构，也使得客户端程序变得简单，但是它也使得设计变得更加抽象，而且也很难对容器中的构件类型进行限制，这会导致在增加新的构件时会产生一些问题。
七：单例模式：
优点：
     1、节约了系统资源。由于系统中只存在一个实例对象，对与一些需要频繁创建和销毁对象的系统而言，单例模式无疑节约了系统资源和提高了系统的性能。
     2、因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。
缺点：
     1、由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。
     2、单例类的职责过重，在一定程度上违背了“单一职责原则”。
模式总结：
     1. 单例模式中确保程序中一个类最多只有一个实例。
     2. 单例模式的构造器是私有了，而且它必须要提供实例的全局访问点。
     3. 单例模式可能会因为多线程的问题而带来安全隐患。
八：适配器模式：
优点：
     1.  将目标类和适配者类解耦，通过使用适配器让不兼容的接口变成了兼容，让客户从实现的接口解耦。
     2.  灵活性和扩展性都非常好在不修改原有代码的基础上增加新的适配器类，符合“开闭原则”。
总结：
     1、当我们需要使用的一个现有的类，但是他的接口并不符合我们的需求时，我们可以使用适配器模式。
     2、适配器模式分为类适配器和对象适配器，其中类适配器需要用到多重继承。