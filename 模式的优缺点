一： 享元模式
优点：
    1、享元模式的优点在于它能够极大的减少系统中对象的个数。
    2、享元模式由于使用了外部状态，外部状态相对独立，不会影响到内部状态，所以享元模式使得享元对象能够在不同的环境被共享。
缺点：
    1、由于享元模式需要区分外部状态和内部状态，使得应用程序在某种程度上来说更加复杂化了。
    2、为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。
适用场景：
    1、如果一个系统中存在大量的相同或者相似的对象，由于这类对象的大量使用，会造成系统内存的耗费，可以使用享元模式来减少系统中对象的数量。
    2、对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。
模式总结：
    1、享元模式可以极大地减少系统中对象的数量。但是它可能会引起系统的逻辑更加复杂化。
    2、享元模式的核心在于享元工厂，它主要用来确保合理地共享享元对象。
    3、内部状态为不变共享部分，存储于享元享元对象内部，而外部状态是可变部分，它应当由客户端来负责。

二：代理模式
优点：
    1.协调调用者和被调用者，降低系统耦合度
    2.在客户端与目标类之间起了中介作用，可以保护目标对象。
缺点：
    1.处理速度变慢
    2.多了额外的工作，有些模式实现非常复杂
适用场景：
    1、 远程代理：为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。
    2、 虚拟代理：通过使用过一个小的对象代理一个大对象。这样就可以减少系统的开销。
    3、 保护代理：用来控制对真实对象的访问权限。
模式总结：
    1、代理模式是通过使用引用代理对象来访问真实对象，在这里代理对象充当用于连接客户端和真实对象的中介者。
    2、代理模式主要用于远程代理、虚拟代理和保护代理。其中保护代理可以进行访问权限控制。
三：策略模式
优点：
    1、策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。
    2、使用策略模式可以避免使用多重条件转移语句。把每种选择都变成了一个类
缺点：
    1.客户端调用必须知道所有的策略类
    2.会产生很多策略类
适用场景：
     1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。
     2,.一个系统需要在几个算法中动态的选择一种。
四：模板模式
优点：
    1.定义了一组算法，具体的不同实现交给子类完成。
    2.一种代码复用的基本技术
    3.导致了一种反向的控制结构，通过一个父类调用其子类的操作，通过对子类的扩展增加新的行为，符合“开闭原则”。
缺点：
    每个不同的实现都需要一个子类来完成，导致类的个数增加，使系统更加复杂，庞大。
适用场景：
    1.一次性实现一个算法的不变部分，并将可变部分留给子类来实现。
    2.各子类公共的行为应该被提取出来并集中到一个公共父类中以避免代码的重复。
模式总结：
    1.定义了算法的步骤，将这些步骤的实现延迟到子类。
    2.提供了代码复用的技巧。
    3.使用抽象类可以定义抽象方法，具体方法和钩子。
    4.为了防止子类改变算法的实现顺序，将其声明为final。
